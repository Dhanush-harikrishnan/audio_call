<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Video Call - <%= roomID %></title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f5f5f5;
      background-image:url('https://wallpapers-clan.com/wp-content/uploads/2024/07/black-panther-action-desktop-wallpaper-preview.jpg');
      background-size: cover; 
      background-repeat: no-repeat;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px;
      margin: 0;
      height: 100vh;
      overflow: hidden;
    }
    button {
      padding: 12.5px 30px;
      border: 0;
      border-radius: 100px;
      background-color: #2ba8fb;
      color: #ffffff;
      font-weight: bold;
      transition: all 0.5s;
      cursor: pointer;
      font-size: 16px;
      width: 100%;
      max-width: 200px;
    }
    
    button:hover {
      background-color: #6fc5ff;
      box-shadow: 0 0 20px #6fc5ff50;
      transform: scale(1.1);
    }
    
    button:active {
      background-color: #3d94cf;
      transition: all 0.25s;
      box-shadow: none;
      transform: scale(0.98);
    }
    h1 {
      color: #f5f5f5;
      text-align: center;
    }
    #controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
      justify-content: center;
      width: 100%;
    }
    #mute-unmute, #end-call {
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
      border: none;
      border-radius: 5px;
      transition: background-color 0.3s ease;
    }
    #mute-unmute {
      background-color: #007bff;
      color: white;
    }
    #mute-unmute:hover {
      background-color: #0056b3;
    }
    #end-call {
      background-color: #dc3545;
      color: white;
    }
    #end-call:hover {
      background-color: #c82333;
    }
    #user-list {
      margin-top: 20px;
      width: 100%;
      max-width: 500px;
    }
    #user-list div {
      padding: 10px;
      margin-bottom: 5px;
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    #user-list div:nth-child(odd) {
      background-color: #f9f9f9;
    }
    #chat {
      margin-top: 20px;
      width: 100%;
      max-width: 500px;
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      padding: 10px;
    }
    #chat-messages {
      height: 200px;
      overflow-y: auto;
      margin-bottom: 10px;
    }
    #chat-messages div {
      margin-bottom: 5px;
    }
    #chat-messages .message {
      display: flex;
      justify-content: flex-start;
    }
    #chat-messages .message.you {
      justify-content: flex-end;
    }
    #chat-messages .message span {
      padding: 5px 10px;
      border-radius: 5px;
      background-color: #e0e0e0;
    }
    #chat-messages .message.you span {
      background-color: #007bff;
      color: white;
    }
    #chat-input {
      display: flex;
      width: 100%;
    }
    #chat-input input {
      flex: 1;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px 0 0 5px;
    }
    #chat-input button {
      padding: 10px;
      border: none;
      border-radius: 0 5px 5px 0;
      background-color: #007bff;
      color: white;
      cursor: pointer;
    }
    #chat-input button:hover {
      background-color: #0056b3;
    }
    #video-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: 10px;
      width: 100%;
      max-width: 1000px;
      margin-top: 20px;
    }
    video {
      width: 100%;
      border-radius: 5px;
      background-color: black;
    }
  </style>
</head>
<body style="background-color: black;"> 
  <h1>Room: <%= roomID %></h1>
  <div id="controls">
    <button id="mute-unmute">Mute</button>
    <button id="toggle-video">Video Off</button>
    <button id="end-call">End Call</button>
  </div>
  <div id="user-list"></div>
  <div id="chat">
    <div id="chat-messages"></div>
    <div id="chat-input">
      <input type="text" id="message" placeholder="Type a message...">
      <button id="send-message">Send</button>
    </div>
  </div>
  <div id="video-grid"></div>
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
  <script>
    const socket = io();
    const roomID = "<%= roomID %>";
    const username = "<%= username %>";
    socket.emit('join-room', { roomID, username });

    const localAudio = document.createElement('audio');
    localAudio.muted = true;
    document.body.appendChild(localAudio);

    const localVideo = document.createElement('video');
    localVideo.muted = true;
    document.getElementById('video-grid').appendChild(localVideo);

    let peerConnections = {};
    let isMuted = false;
    let isVideoOn = true;

    navigator.mediaDevices.getUserMedia({
      audio: {
        echoCancellation: true,
        noiseSuppression: true,
        autoGainControl: true
      },
      video: true
    })
    .then(stream => {
      localAudio.srcObject = stream;
      localAudio.play().catch(error => console.error('Error playing local audio:', error));

      localVideo.srcObject = stream;
      localVideo.play().catch(error => console.error('Error playing local video:', error));

      function toggleMute() {
        isMuted = !isMuted;
        localAudio.srcObject.getAudioTracks().forEach(track => track.enabled = !isMuted);
        document.getElementById('mute-unmute').textContent = isMuted ? 'Unmute' : 'Mute';
        socket.emit('mute-unmute', { id: socket.id, isMuted });
      }

      function toggleVideo() {
        isVideoOn = !isVideoOn;
        localVideo.srcObject.getVideoTracks().forEach(track => track.enabled = isVideoOn);
        document.getElementById('toggle-video').textContent = isVideoOn ? 'Video Off' : 'Video On';
        socket.emit('toggle-video', { id: socket.id, isVideoOn });
      }

      socket.on('update-user-list', (users) => {
        const userList = document.getElementById('user-list');
        userList.innerHTML = '';
        for (let id in users) {
          const user = users[id];
          const userItem = document.createElement('div');
          userItem.textContent = `${user.username} ${user.muted ? '(Muted)' : ''}`;
          userItem.style.color = getColorForUsername(user.username);
          userList.appendChild(userItem);

          if (!peerConnections[id] && id !== socket.id) {
            createPeerConnection(id, stream);
          }
        }
      });

      socket.on('user-connected', id => {
        if (!peerConnections[id]) {
          createPeerConnection(id, stream);
        }
        addMessage(`User ${id} connected`, 'System');
      });

      socket.on('user-disconnected', id => {
        if (peerConnections[id]) {
          peerConnections[id].close();
          delete peerConnections[id];
        }
        addMessage(`User ${id} disconnected`, 'System');
      });

      socket.on('offer', (id, description) => {
        const peerConnection = createPeerConnection(id, stream);
        peerConnection.setRemoteDescription(description)
          .then(() => peerConnection.createAnswer())
          .then(sdp => peerConnection.setLocalDescription(sdp))
          .then(() => {
            socket.emit('answer', id, peerConnection.localDescription);
          });
      });

      socket.on('answer', (id, description) => {
        peerConnections[id].setRemoteDescription(description);
      });

      socket.on('ice-candidate', (id, candidate) => {
        peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));
      });

      socket.on('mute-unmute', ({ id, isMuted }) => {
        const remoteAudio = document.getElementById(`remote-audio-${id}`);
        if (remoteAudio) {
          remoteAudio.muted = isMuted;
        }
        const userList = document.getElementById('user-list');
        const userItems = userList.getElementsByTagName('div');
        for (let item of userItems) {
          if (item.textContent.includes(id)) {
            item.textContent = item.textContent.replace('(Muted)', '').trim();
            if (isMuted) {
              item.textContent += ' (Muted)';
            }
          }
        }
      });

      socket.on('toggle-video', ({ id, isVideoOn }) => {
        const remoteVideo = document.getElementById(`remote-video-${id}`);
        if (remoteVideo) {
          remoteVideo.srcObject.getVideoTracks().forEach(track => track.enabled = isVideoOn);
        }
      });

      document.getElementById('mute-unmute').addEventListener('click', toggleMute);
      document.getElementById('toggle-video').addEventListener('click', toggleVideo);
      document.getElementById('end-call').addEventListener('click', () => {
        socket.emit('end-call');
        window.location.href = '/';
      });

      document.getElementById('send-message').addEventListener('click', sendMessage);
      document.getElementById('message').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          sendMessage();
        }
      });

      function sendMessage() {
        const message = document.getElementById('message').value;
        if (message.trim()) {
          socket.emit('chat-message', { message, username });
          addMessage(`You: ${message}`, username);
          document.getElementById('message').value = '';
        }
      }

      function addMessage(message, sender) {
        const chatMessages = document.getElementById('chat-messages');
        const messageElement = document.createElement('div');
        messageElement.classList.add('message');
        if (sender === username) {
          messageElement.classList.add('you');
        }
        const span = document.createElement('span');
        span.textContent = message;
        messageElement.appendChild(span);
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }

      socket.on('chat-message', ({ message, username: sender }) => {
        if (sender !== username) {
          addMessage(`${sender}: ${message}`, sender);
        }
      });

      function getColorForUsername(username) {
        const colors = ['#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080'];
        let hash = 0;
        for (let i = 0; i < username.length; i++) {
          hash = username.charCodeAt(i) + ((hash << 5) - hash);
        }
        return colors[Math.abs(hash) % colors.length];
      }

      socket.on('end-call', () => {
        for (let id in peerConnections) {
          peerConnections[id].close();
          delete peerConnections[id];
        }
        window.location.href = '/';
      });

    })
    .catch(error => {
      console.error('Error accessing media devices:', error);
    });

    function createPeerConnection(id, stream) {
      const peerConnection = new RTCPeerConnection();
      stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));

      peerConnection.ontrack = event => {
        let remoteAudio = document.getElementById(`remote-audio-${id}`);
        if (!remoteAudio) {
          remoteAudio = document.createElement('audio');
          remoteAudio.id = `remote-audio-${id}`;
          document.body.appendChild(remoteAudio);
        }
        remoteAudio.srcObject = event.streams[0];
        remoteAudio.play().catch(error => console.error('Error playing remote audio:', error));

        let remoteVideo = document.getElementById(`remote-video-${id}`);
        if (!remoteVideo) {
          remoteVideo = document.createElement('video');
          remoteVideo.id = `remote-video-${id}`;
          document.getElementById('video-grid').appendChild(remoteVideo);
        }
        remoteVideo.srcObject = event.streams[0];
        remoteVideo.play().catch(error => console.error('Error playing remote video:', error));
      };

      peerConnection.onicecandidate = event => {
        if (event.candidate) {
          socket.emit('ice-candidate', id, event.candidate);
        }
      };

      peerConnection.createOffer()
        .then(sdp => peerConnection.setLocalDescription(sdp))
        .then(() => {
          socket.emit('offer', id, peerConnection.localDescription);
        });

      peerConnections[id] = peerConnection;
      return peerConnection;
    }
  </script>
</body>
</html>
